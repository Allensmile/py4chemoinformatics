== 10章: ディープラーニング入門
:imagesdir: images

c9章でRandom Forestを用いたQSAR解析をしましたが、QSARに用いられるアルゴリズムはこれ以外にSupport Vector Machine(SVM), Logistic Regiression, Artificial Neural Network(ANN)などといったものが利用されています。

本章では、近年注目を浴びているANNの一種であるディープラーニングの概要に関して説明し、ディープラーニングフレームワークであるTensorflow/Kerasを利用してみます。

=== ディープラーニングに関して

生物の脳には神経細胞が存在し、それらがネットワークを形成することで情報を伝達したり、記憶や学習しています。このネットワーク構造を数理モデル化したものがArtificial Neural Network(ANN)です。

ANNは、学習のための情報を入れる**入力層**、入力情報のパターンを元に反応するかしないか（神経シナプスの発火に対応）を学習する**中間層（または隠れ層）**、最後の**出力層**の三層から構成されていますが、ディープラーニングはこの隠れ層、多層にする構造にすることで高精度な予測を可能としています。

ディープラニングは近年盛んに研究されており、上記のような多層構造を持つという単純なモデルだけではなく様々な構造のモデルが日々提案されています。それらすべてのフォローは本書の範囲を超えるのでこれ以上は説明しません。


=== TensorFlowとKerasについて

Tensorflowは最近1.xから2.xにメジャーアップデートをしていますが、2.x版はまだ登場したばかりで参考情報が少ないので、1.x系を利用してください。また同じ1.xでもバージョンによってAPIが異なるので、動かしたいコードがあった場合、どのバージョンで書かれているかに気をつける必要があります。

KerasはTensoflowなどの低レベルフレームワークをバックエンドにした高レベルAPIで、テンポよくコードが書けます。KerasはもともとTensorflowとは独立して開発されてきましたが、最近のTensorflowはKerasを取り込んでいます。そのため別途イントールしなくてもTensorflowからKerasを利用できますが、Tensorflow同梱バージョンのKerasは本家との最新バージョンになっていないことがあります。

実際に本家Kerasを使うのが良いか、Tensorflow同梱のKerasを使うのが良いのかは悩ましいところですが本書では利便性のためにTensorflowに統合されたKerasを利用します。

.KerasとTensorflowの関係性
****
KerasとTensoflowをlink:https://blog.keras.io/introducing-keras-2.html[オフィシャルブログを参照]しつつ少し整理しておきます。元々KerasはTensoflowとは別のプロジェクトとして開発されており（もちろん今もです）Kerasを使うにはTensorflowとはインストールする必要がありました。しかし2017年Keras2.xのメジャーバージョンアップのタイミングのあたりでTensoflowプロジェクトがKerasを統合するようになりました。以下の英文は上記リンクの記事の抜粋です。現在はTensorflowからKerasを呼び出し利用することが可能になっています。

_TensorFlow integration
Although Keras has supported TensorFlow as a runtime backend since December 2015, the Keras API had so far been kept separate from the TensorFlow codebase. This is changing: the Keras API will now become available directly as part of TensorFlow, starting with TensorFlow 1.2. This is a big step towards making TensorFlow accessible to its next million users._
****

=== インストールしてみよう

Tensorflow とKerasをインストールしてみましょう。
anacondaでインストールする場合、GPU対応バージョンを使うか、CPUバージョンを使うかでインストールするパッケージが少し異なります。

[source, bash]
----
# CPU版
$ conda install -c conda-forge tensorflow
# GPU版
$ conda install -c anaconda tensorflow-gpu
----

[source, bash]
----
$ conda install -c conda-forge keras 
----

この例ではcondaコマンドを利用しインストールしていますが、pipコマンドを利用しインストールすることもできます。その場合はlink:https://www.tensorflow.org/install[公式ドキュメント]を参照してください。しかし基本的にはCondaで環境を作ったらCondaでパッケージを入れることが望ましいでしょう。


参考リンク

- https://keras.io/#installation
- https://conda.io/projects/conda/en/latest/user-guide/tasks/manage-pkgs.html

=== Google colabとは

.Google colab
****
link:https://colab.research.google.com/notebooks/welcome.ipynb[Google colaboratory]はクラウド上で実行できるJupyter notebook環境です。Theano, Thensorflow, Keras, Pytorchなどのディープラーニング用のフレームワークがインストール済みなのと時間の制限はありますがGPUが使えるため、手元にGPUマシンがなくてもディープラーニングを利用できる点が非常に魅力的です。

利用にはGoogleのアカウントを作成する必要があるので、もしGoogleアカウントを持っていなければこの機会にアカウントを取得し利用してみると良いでしょう。
****

Google のアカウントがある方はGitHub状のノートブックをそのままColab上で実行することもできます。（*デフォルトで提供されていないライブラリもあるのでその場合は別途環境を作る必要があります。）ここでは、以前Mishima.sykで実施たScikit-learnハンズオンのノートブックを開いてみます。
まず、link:https://colab.research.google.com/notebooks/welcome.ipynb[Google colaboratory]にアクセスします。

image::ch10/ch10_1.png[GoogleColabTop, pdfwidth=60%]

次いで、GitHubというタブをクリックし、以下のURLをコピペします。
link:https://github.com/Mishima-syk/sklearn-tutorial[https://github.com/Mishima-syk/sklearn-tutorial]
するとURL先のNotebookが読み込ます。本資料は@y_samaが作成したものです。データの準備から、link:https://automl.github.io/auto-sklearn/master/[AutoSklearn] まで網羅されていますので、機械学習を学びたい方にとっては良いマテリアルになると思います。
後半のPandasMLやAutoSklearnは、デフォルトの設定ですとColabに入ってないとエラーが出たらライブラリをインストールしてください。

image::ch10/ch10_2.png[GoogleColab2, pdfwidth=60%]

ノートブックを開くとJupyter notebookと同じような画面になります。Shift＋リターンキーでセルのコードを実行できます。

image::ch10/ch10_2.png[NoteBook, pdfwidth=60%]

GoogleColabデフォルトで利用できるライブラリを確認するにはセルの中で '!pip freeze'と打つと列記されます。

- absl-py==0.7.0
- alabaster==0.7.12
- たくさん出てくる
- yellowbrick==0.9.1
- zict==0.1.3
- zmq==0.0.0

==== 補足

Pythonでディープラーニングを行う場合、複数のフレームワークがあります。主なものを挙げると

- link:http://deeplearning.net/software/theano/[Theano]
- link:https://www.tensorflow.org/[Tensorflow]
- link:https://keras.io/[Keras]
- link:https://mxnet.apache.org/[MXNet]
- link:https://chainer.org/[Chainer]
- link:https://pytorch.org/[PyTorch]

があります。様々な深層学習の文献を見ていると実装に上記のフレームワークが色々使われており、どれを使えば正解といったことは言えません。この本ではKerasを使っています。
色々ご自身でも試してみて自分が使いやすいものを選ぶのでも良いと思います。

<<<
