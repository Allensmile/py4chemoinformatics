= ディープラーニング入門

この章では、ディープラーニグの概要に関して説明し、それを実行するためのフレームワークであるTensorflow/Kerasをインストールしてみます。
生物の脳には神経細胞が存在し、それらがネットワークを形成することで情報を伝達したり、記憶や学習しています。このネットワーク構造を数理モデル化し、機械学習へ応用したものがArtificial Neural Network(ANN)です。一般的なANNは、学習のための情報を入れる**入力層**、入力情報のパターンを元に反応するかしないか（神経シナプスの発火に対応）を学習する**中間層（または隠れ層）**、最後の**出力層**の三層から構成されます。ディープラーニングはこの隠れ層の部分が分岐なども含む多層構造になっています。近年盛んに研究されている分野であり、上記のような多層構造を持つという単純なモデルのみではなく様々な構造のモデルが日々論文に報告されています。それらすべてのフォローは本書の範囲を超えるので記載はしません。

== TensorFlowとKerasについて

Pythonでディープラーニングを行いたい場合、複数のフレームワークがあります。Theano, Tensorflow, Keras, MXNet, Chainer, PyTorch、、、色々あり、これを使えば絶対間違い無いというものは正直無いのですが、今回はGoogle社が開発しているフレームワークのTensorflow, Kerasを使ってみましょう。
Tensorflowは最近1.xから2.xにメジャーアップデートをしています。2.x版はまだ登場したばかりで参考情報も少ないので、1.x系でまずは試すのが良いかと思います。また同じ1.x版でもバージョンによってAPIが少しづつ変わっていますので、今後動かしたいコードがあった時にどのバージョンで書かれているかなども気をつけると良いです。
KerasはTensoflowなどをバックエンドに動く高レベルニューラルネットワークAPIです。Tensorflowは低レベルなAPIを提供しているので、ご自身で細かい部分まで実装したいというニーズにはぴったりですが、実験的にちょっと試してみたいという時にはKerasを利用するとテンポよくコードが書けるでしょう。KerasはもともとTensorflowとは独立して開発されてきましたが、最近のTensorflowはKerasを取り込んでいます。したがってTensorflow側からKerasを呼び出し、ネットワークを構築することができます。Kerasそのものを使うのが良いか、Tensorflow側のKerasを使うのが良いのか、悩ましいところです。Kerasで作ってきたコードをTensorflowに統合されたKerasに移行するのはそれほど大変ではありません。また、今後Tensorflow側のモジュールを使いたくなることもあるかもしれないので筆者は最近Tensorflowに統合されたKerasを利用するようにしました。


参考リンク
- https://www.tensorflow.org/
- https://keras.io/

== Google colabについて（保留中）

== インストールしてみよう

では早速Tensorflow と　Kerasをインストールしてみましょう。
anacondaを利用しインストールする場合、GPU対応バージョンを使うか、CPUバージョンを使うかでコマンドが少し異なります。現時点の最新版では残念ながらMacOs用パッケージではGPUサポートは無いようです。
以下の例ではcondaコマンドを利用しインストールしていますが、pipコマンドを利用しインストールすることもできます。公式のドキュメントにも記載がありますが基本的にはCondaで環境を作ったらCondaでパッケージを入れることが望ましいでしょう。

[source, bash]
----
# CPU版
$ conda install -c conda-forge tensorflow
# GPU版
$ conda install -c anaconda tensorflow-gpu
----

[source, bash]
----
$ conda install -c conda-forge keras 
----


参考リンク
- https://www.tensorflow.org/install
- https://keras.io/#installation
- https://conda.io/projects/conda/en/latest/user-guide/tasks/manage-pkgs.html
