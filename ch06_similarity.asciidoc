== 6章: 化合物の類似性を評価してみる
:imagesdir: images

image:jupyter.png[link="https://github.com/Mishima-syk/py4chemoinformatics/blob/master/notebooks/ch06_similarity.ipynb"]

=== 化合物が似ているとはどういうことか？

２つの化合物が似ているとはどういうことでしょうか？なんとなく形が似ている？という表現は科学的ではありません。
ケモインフォマティクスでは類似度(一般的に0-100の値を取ります)や非類似度（距離）といった定量的な尺度により似ているか
どうかを評価します。

ここでは主に２つの代表的な尺度を紹介します。

==== 記述子

分子の全体的な特徴を数値で表現するものを記述子と呼びます。分子量や極性表面性（PSA）、分配係数(logP)などがあり、現在までに多くの記述子が提案されています。
これらの記述子の類似性を評価することで２つの分子がどのくらい似ているかを表現することが可能です。また分子全体の特徴を一つの数字で表現するために局所的な特徴はできないです。

NOTE:いくつかの記述子に関しては市販ソフトでないと計算できない場合があります。

==== フィンガープリント

もう一つがフィンガープリントです。フィンガープリントとは分子の部分構造を0,1のバイナリーで表現したもので部分構造の有無とビットのon(1),off(0)を対応させたものになります。
フィンガープリントには固定長FPと可変長FPの二種類が存在し、古くはMACSKeyという固定長FP(予め部分構造とインデックスが決められているFP)が使われていましたが、現在ではECFP4(Morgan2)という可変長FPが利用されるのが普通です。

RDKitのフィンガープリントに関してはlink:https://www.rdkit.org/UGM/2012/Landrum_RDKit_UGM.Fingerprints.Final.pptx.pdf[開発者のGregさんのスライド]が詳しいので熟読してください。

今回はこのECFP4(Morgan2)を利用した類似性評価をしてみましょう。

=== 類似度を計算する

まずは手始めに簡単な分子としてトルエンとクロロベンゼンの類似性を評価してみましょう。

[source, python]
----
from rdkit import Chem, DataStructs
from rdkit.Chem import AllChem, Draw
from rdkit.Chem.Draw import IPythonConsole
----

smilesで分子を読み込みます。

[source, python]
----
mol1 = Chem.MolFromSmiles("Cc1ccccc1")
mol2 = Chem.MolFromSmiles("Clc1ccccc1")
----

一応目視で確認しておきます。

[source, python]
----
Draw.MolsToGridImage([mol1, mol2])
----

ECFP4に相当する半径2のモルガンフィンガープリントを生成します。

[source, python]
----
fp1 = AllChem.GetMorganFingerprint(mol1, 2)
fp2 = AllChem.GetMorganFingerprint(mol2, 2)
----

類似度の評価にはタニモト係数を使います。

[source, python]
----
DataStructs.TanimotoSimilarity(fp1, fp2)
# 0.5384615384615384
----

=== バーチャルスクリーニング

ここまでで化合物の類似性の評価方法について説明しました。この類似性の指標を用い多くの化合物の中から特定の化合物群を選び出すことをバーチャルスクリーニングと呼びます。

例えば薬になりそうな化合物が特許や論文で発表されたり、自社のアッセイ系で有望そうな化合物が見つかった場合、自社の化合物ライブラリデータベースや市販化合物のデータベースの中に類似の化合物で、より有望そうなものがあるかどうかを探したいことがあります。ここではノイラミニダーゼ阻害薬として知られるインフルエンザ治療薬であるlink:https://www.ebi.ac.uk/chembl/beta/compound_report_card/CHEMBL466246/[イナビル]の類似体が購入可能であるかをlink:http://zinc15.docking.org/[ZINC]を利用して調べます。

イナビルの分子量が約350,LogPが約-3だったのZINCの分子量350-375,LogP=-1の340万化合物の区画を選択しました。この区画は16のファイルに分かれていますが、最初の1セットだけダウンロードして使ってみます。

NOTE: データのダウンロード方法は4章で説明しています。

jupyter notebookでは!で始めるとShellコマンドを実行できます。以下はjupyter notebook上でwgetコマンドでZINCのデータセットをダウンロードする例です

[source, python]
----
!wget http://files.docking.org/2D/EA/EAED.smi
----

ファイルからSMILESを読み込んでmolオブジェクトにしますが最初の行はヘッダーなので読み飛ばします。また、各行の最終文字は改行文字なのでl[:-1]として除いています。最後に何化合物あるか調べます。

[source, python]
----
mols = []
with open("EAED.smi") as f:
    f.readline()
    for l in f:
        mol = Chem.MolFromSmiles(l[:-1])
        mols.append(mol)
print(len(mols))
# 195493
----

続いてイナビル(LANIMAMIBIR)との類似度を調べるための関数を用意します。

[source, python]
----
laninamivir = Chem.MolFromSmiles("CO[C@H]([C@H](O)CO)[C@@H]1OC(=C[C@H](NC(=N)N)[C@H]1NC(=O)C)C(=O)O")
laninamivir_fp = AllChem.GetMorganFingerprint(laninamivir, 2)

def calc_laninamivir_similarity(mol):
    fp = AllChem.GetMorganFingerprint(mol, 2)
    sim = DataStructs.TanimotoSimilarity(laninamivir_fp, fp)
    return sim
----

調べてみます。

[source, python]
----
similar_mols =[]
for mol in mols:
    sim = calc_laninamivir_similarity(mol)
    if sim > 0.2:
        similar_mols.append((mol, sim))
----

結果を類似度の高い順に並べ替えて最初の10件だけ取り出します。

[source, python]
----
similar_mols.sort(key=lambda x: x[1], reverse=True)
mols = [l[0] for l in similar_mols[:10]]
----

描画してみます。

[source, python]
----
Draw.MolsToGridImage(mols, molsPerRow=5)
----

image::ch06/vs01.png[result]

類似度を確認すればわかりますが、今回調べた約20万件の化合物のでは最高でも23%の類似度しかないためあまり似ている化合物は見いだせませんでした。しかしZINCは7億5000万件のデータを収録してあるのでその中にはもっと似ている化合物はたくさんあるはずです。

=== Structure Based Drug Design(SBDD)

(LBVSに触れたのでSBVS,SBDDにも言及するかどうか検討中のサブセクション)

ここでは抗凝固薬として上市されているlink:https://www.ebi.ac.uk/chembl/beta/compound_report_card/CHEMBL231779/[apixaban], link:https://www.ebi.ac.uk/chembl/beta/compound_report_card/CHEMBL198362/[rivaroxiaban]の類似性を評価します。
構造を見るとわかりますが、なんとなく似ていますが、どの部分とどの部分が対応するか
想像つくでしょうか？実はこの２つの化合物は両方共FXaというセリンプロテアーゼの同じポケットに
同じような結合モードで結合することでプロテアーゼの働きを阻害することが知られています。興味があれば
実際にPDBから複合体の結晶構造を探して眺めてみるといいかもしれません。
（pymol入門まで拡張するか？要検討）

[source, python]
----
apx = Chem.MolFromSmiles("COc1ccc(cc1)n2nc(C(=O)N)c3CCN(C(=O)c23)c4ccc(cc4)N5CCCCC5=O")
rvx = Chem.MolFromSmiles("Clc1ccc(s1)C(=O)NC[C@H]2CN(C(=O)O2)c3ccc(cc3)N4CCOCC4=O")
----

構造を眺めてみます。メトキシフェニルとクロロチオールは同じような結合様式をとるんでしょうか？このような結合の成分をきちんと評価する方法もあるのですが、本書の内容を超えるので説明はしません。もし興味があればFragment Molecular Orbital Methodで調べてみてください

[source, python]
----
Draw.MolsToGridImage([apx, rvx], legends=["apixaban", "rivaroxaban"])
----


[source, python]
----
apx_fp = AllChem.GetMorganFingerprint(apx, 2)
rvx_fp = AllChem.GetMorganFingerprint(rvx, 2)
----


[source, python]
----
DataStructs.TanimotoSimilarity(apx_fp, rvx_fp)
# 0.40625
----

40%くらいの類似度ということになりました。

<<<
